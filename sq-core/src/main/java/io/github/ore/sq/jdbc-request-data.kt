@file:Suppress("unused")

package io.github.ore.sq

import io.github.ore.sq.impl.SqJdbcRequestDataBuilderFlatImpl
import java.sql.Connection
import java.sql.PreparedStatement
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract


open class SqJdbcRequestData(
    open val sql: String,
    open val parameters: List<SqParameter<*, *>>,
) {
    protected open fun <T: PreparedStatement> setParametersTo(target: T): T {
        this.parameters.forEachIndexed { index, parameter ->
            parameter.write(target, index + 1)
        }
        return target
    }

    fun prepareStatement(connection: Connection): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql))
    fun prepareStatement(connection: Connection, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql, resultSetType, resultSetConcurrency))
    fun prepareStatement(connection: Connection, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql, resultSetType, resultSetConcurrency, resultSetHoldability))
    fun prepareStatement(connection: Connection, autoGeneratedKeys: Int): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql, autoGeneratedKeys))
    fun prepareStatement(connection: Connection, columnIndexes: IntArray): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql, columnIndexes))
    fun prepareStatement(connection: Connection, columnNames: Array<String>): PreparedStatement =
        this.setParametersTo(connection.prepareStatement(this.sql, columnNames))
}

interface SqJdbcRequestDataBuilder {
    companion object {
        val KEYWORD_CONVERTER__TO_UPPER_CASE: SqFunction<String, String> = { it.uppercase() }
        val KEYWORD_CONVERTER__TO_LOWER_CASE: SqFunction<String, String> = { it.lowercase() }


        val IDENTIFIER__SAFE_REGEX: Regex = Regex("^[a-z][_a-z0-9]*$")

        val IDENTIFIER__CONVERTER: SqFunction<String, String> = {
            if (IDENTIFIER__SAFE_REGEX.matches(it)) {
                it
            } else {
                buildString(it.length) {
                    this.append('"')
                    for (char in it) {
                        if (char == '"') {
                            this.append("\"\"")
                        } else {
                            this.append(char)
                        }
                    }
                    this.append('"')
                }
            }
        }


        const val PARAMETER_MARK: String = "?"
        const val INDENT_PART: String = "  "
        val LINE_SEPARATOR: String = System.lineSeparator()
    }


    val data: SqJdbcRequestData

    val commentsAllowed: Boolean

    fun text(value: String): SqJdbcRequestDataBuilder
    fun text(value: Char): SqJdbcRequestDataBuilder
    fun keyword(value: String): SqJdbcRequestDataBuilder
    fun identifier(value: String): SqJdbcRequestDataBuilder
    fun parameter(value: SqParameter<*, *>): SqJdbcRequestDataBuilder

    fun space(): SqJdbcRequestDataBuilder
    fun comment(value: String): SqJdbcRequestDataBuilder

    fun nothingOrSpace(): SqJdbcRequestDataBuilder
    fun nothingOrNewLine(): SqJdbcRequestDataBuilder
    fun spaceOrNothing(): SqJdbcRequestDataBuilder
    fun spaceOrNewLine(): SqJdbcRequestDataBuilder

    fun incrementIndent(): SqJdbcRequestDataBuilder
    fun decrementIndent(): SqJdbcRequestDataBuilder

    fun clear(): SqJdbcRequestDataBuilder
}

fun interface SqJdbcRequestDataBuilderFactory {
    operator fun invoke(context: SqContext): SqJdbcRequestDataBuilder
}

fun <T: SqSettingsBuilder> T.jdbcRequestDataBuilderFactory(value: SqJdbcRequestDataBuilderFactory?): T =
    this.setValue(SqJdbcRequestDataBuilderFactory::class.java, value)
val SqSettings.jdbcRequestDataBuilderFactory: SqJdbcRequestDataBuilderFactory
    get() = this.getValue(SqJdbcRequestDataBuilderFactory::class.java) ?: SqJdbcRequestDataBuilderFlatImpl.Factory.INSTANCE


fun SqContext.jdbcRequestDataBuilder(): SqJdbcRequestDataBuilder =
    this.settings.jdbcRequestDataBuilderFactory.invoke(this)

inline fun <T> SqContext.jdbcRequestDataBuilder(block: (builder: SqJdbcRequestDataBuilder) -> T): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return this.jdbcRequestDataBuilder().use(block)
}

inline fun SqContext.jdbcRequestData(block: (builder: SqJdbcRequestDataBuilder) -> Unit): SqJdbcRequestData {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return this.jdbcRequestDataBuilder { builder ->
        block(builder)
        builder.data
    }
}


fun <T: SqJdbcRequestDataBuilder> T.comma(): T = this.apply { this.text(',') }
fun <T: SqJdbcRequestDataBuilder> T.dot(): T = this.apply { this.text('.') }
fun <T: SqJdbcRequestDataBuilder> T.openBracket(): T = this.apply { this.text('(') }
fun <T: SqJdbcRequestDataBuilder> T.closedBracket(): T = this.apply { this.text(')') }

inline fun <T: SqJdbcRequestDataBuilder, R> T.use(block: (builder: T) -> R): R {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    return try {
        block(this)
    } finally {
        this.clear()
    }
}

inline fun <T: SqJdbcRequestDataBuilder> T.indent(block: (builder: T) -> Unit): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }

    this.incrementIndent().spaceOrNewLine()
    block(this)
    this.decrementIndent().spaceOrNewLine()
    return this
}

inline fun <T: SqJdbcRequestDataBuilder> T.brackets(block: (builder: T) -> Unit): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }

    this.openBracket()
    block(this)
    this.closedBracket()
    return this
}

inline fun <T: SqJdbcRequestDataBuilder> T.bracketsWithIndent(block: (builder: T) -> Unit): T {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }

    return this.brackets {
        this.incrementIndent().nothingOrNewLine()
        block(this)
        this.decrementIndent().nothingOrNewLine()
    }
}
